const ERROR_INVALID_PARAMETERS_ON_FACTORY = 'The store factory need add login function, signup function and getProfile function';
const ERROR_INVALID_CREDENTIALS = 'invalid credentials'

export default function factory (loginFunc , signupFunc, getProfileFunc) {
  if (typeof loginFunc !== 'function' || typeof signupFunc !== 'function' || typeof getProfileFunc !== 'function') {
    throw new Error(ERROR_INVALID_PARAMETERS_ON_FACTORY);
  }
  return {
    plugins: [],
    state: intitialState,
    actions: {
      authenticate,
      updateJwt,
      setJwtAndGetUser,
      createAccount,
      logout
    },
    mutations: {
      setJwt,
      setUser,
      setLoginData,
      setSignupData
    },
    getters: {}
  };

  // MUTATIONS
  function setJwt (state, jwt) {
    jwt = (jwt !== null) ? jwt : intitialState().jwt;
    state.jwt = jwt;
  }
  
  function setUser (state, user) {
    user = (user !== null) ? user : intitialState().user;
    Object.assign(state.user, user);
  }

  function setLoginData (state, data) {
    data = (data !== null) ? data : intitialState().loginData;
    Object.assign(state.loginData, data);
  }

  function setSignupData (state, data) {
    data = (data != null) ? data : intitialState().signupData;    
    Object.assign(state.signupData, data);
  }

  // ACTIONS
  function authenticate ({ commit, state }) {
    return new Promise((resolve, reject) => {
      commit('setLoginData', { loading: true });
      const email = state.loginData.email;
      const password = state.loginData.password;

      if (email === '' || password === '') {
        commit('setLoginData', {error: ERROR_INVALID_CREDENTIALS, loading: false});
        return reject(new Error(ERROR_INVALID_CREDENTIALS));
      }
      return loginFunc(state.loginData.email, state.loginData.password)
        .then((jwt) => {
          commit('setLoginData', intitialState().loginData);
          commit('setJwt', jwt);
          resolve(jwt);
        })
        .catch((error) => {
          const message = (error && error.message) ? error.message : error;
          commit('setLoginData', { loading: false, error: message });
          reject(error);
        });
    });
  }
  
  function updateJwt ({ commit }, token) {
    return Promise.resolve(commit('setJwt', token));
  }

  function setJwtAndGetUser ({ commit }, token = null) {
    commit('setJwt', token);
    return getProfileFunc(token)
      .then((user) => {
        return commit('setUser', user);
      });
  }

  function createAccount ({ commit, state, dispatch }) {
    return new Promise((resolve, reject) => {
      commit('setSignupData', { loading: true });
      const data = {
        name: state.signupData.name,
        email: state.signupData.email,
        password: state.signupData.password
      };
      const loginData = {
        email: state.signupData.email,
        password: state.signupData.password
      };
      return signupFunc(data)
        .then(user => commit('setUser', user))
        .then(() => commit('setLoginData', loginData))
        .then(() => dispatch('authenticate'))
        .then(() => commit('setJwt', state.jwt))
        .then(() => commit('setSignupData', null))
        .then(resolve)
        .catch((error) => {
          const message = (error && error.message) ? error.message : error;
          commit('setSignupData', { loading: false, error: message });
          reject(error);
        });
    });
  }

  function logout ({ commit }) {
    commit('setJwt', null);
    return Promise.resolve(commit('setUser', null));
  }
}

function intitialState () {
  return Object.assign({}, {
    jwt: '',
    user: {},
    loginData: {
      email: '',
      password: '',
      error: null,
      loading: false
    },
    signupData: {
      name: '',
      email: '',
      password: '',
      error: null,
      loading: false
    }
  });
}
